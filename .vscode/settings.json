{
    "json.schemas": [
        {
            "fileMatch": ["server/**/auth.json"],
            "schema": {
                "properties": {
                    "openWeatherAPIKey": {
                        "description": "API Key to access the Open Weather API",
                        "type": "string"
                    },
                    "mapQuestAPIKey": {
                        "description": "API Key for Map Quest",
                        "type": "string"
                    },
                    "validClientIDs": {
                        "description": "An array of tokens that can be used to trigger api flows",
                        "type": ["array"]
                    }
                },
                "required": [
                    "openWeatherAPIKey",
                    "mapQuestAPIKey",
                    "validClientIDs"
                ],
                "additionalProperties": false
            }
        },
        {
            "fileMatch": [
                "server/**/config.json"
            ],
            "schema": {
                "properties": {
                    "useWeatherCaching": {
                        "description": "If true, only call pirate weather if it has been more than x minutes since the lsat request",
                        "type": "boolean"
                    },
                    "cacheMaxLifespanMinutes": {
                        "description": "The number of minutes a cache can be reused before a call to pirate weather is made",
                        "type": "number",
                        "minimum": 15
                    },
                    "port": {
                        "type": "number",
                        "description": "Port number the server runs on",
                        "minimum": 0,
                        "maximum": 65535
                    },
                    "maxCachedItems": {
                        "type": "number",
                        "description": "Limit on how many items can be in the cache, if the limit is met, items that should be cached just aren't",
                        "minimum": 0
                    }
                },
                "required": [
                    "useWeatherCaching",
                    "cacheMaxLifespanMinutes",
                    "port"
                ],
                "additionalProperties": false
            }
        },


        {
            "fileMatch": ["client/**/auth.json"],
            "schema": {
                "properties": {
                    "motherAuthToken": {
                        "description": "API Token to contact Mother",
                        "type": "string"
                    },
                    "isItRainingAuthToken": {
                        "description": "API Token to access Is It Raining",
                        "type": "string"
                    },
                    "speechServicesAuthToken": {
                        "description": "API Token to access Microsoft Speech Services",
                        "type": "string"
                    },
                    "speechServicesAuthRegion": {
                        "description": "Region the Microsoft Speech Service runs in",
                        "type": "string"
                    }
                },
                "required": [
                    "motherAuthToken",
                    "isItRainingAuthToken",
                    "speechServicesAuthToken",
                    "speechServicesAuthRegion"
                ],
                "additionalProperties": false
            }
        },
        {
            "fileMatch": [
                "client/**/config.json"
            ],
            "schema": {
                "properties": {
                    "offlineBehaviour": {
                        "description": "Behaviour if the client is unable to contact the IIT API (repeatLast or block).",
                        "type": "string"
                        
                    },
                    "motherDownloadedConfigFilename": {
                        "description": "The name of the file containing stored properties from Mother",
                        "type": "string"
                    },
                    "fallbackSettings": {
                        "type": "object",
                        "description": "Fallback settings if Mother is unavilable",
                        "required": ["savePreviousAudioFiles", "volume", "location"],
                        "properties": {
                            "savePreviousAudioFiles": {
                                "description": "Whether or not to save created audio files for reuse. If set to `false` after being true, existing audio files will be deleted",
                                "type": "boolean"
                            },
                            "volume": {
                                "description": "Volume of played audio files (0-10)",
                                "type": "number",
                                "minimum": 0,
                                "maximum": 10
                            },
                            "location": {
                                "type": "object",
                                "properties": {
                                    "type": {
                                        "type": "string",
                                        "description": "Either `city` or `latlng`"
                                    },
                                    "value": {
                                        "type": ["string", "array"],
                                        "description": "Either the name of a searching city location string or lat,lng position (`city string` or [lat, long])"
                                    }
                                }
                            }
                        }
                    },
                    "motherCheckInInterval_ms": {
                        "description": "How long should the client wait between checkins and downloads from Mother (milliseconds)",
                        "type": "number",
                        "minimum": 15000,
                    },
                    "motherDownloadAlsoChecksIn": {
                        "description": "If on the Mother server, downloading the config also counts as checking in",
                        "type": "boolean"
                    }
                },
                "required": [
                    "offlineBehaviour",
                    "motherDownloadedConfigFilename",
                    "fallbackSettings",
                    "motherCheckInInterval_ms",
                    "motherDownloadAlsoChecksIn"
                ],
                "additionalProperties": false
            }
        }
    ],
    "cSpell.words": [
        "Behaviour",
        "latlng"
    ]
}